Challenge change cake-autorate more to my taste ;)


use flock to serialize pinger kill/start sequences from each other

use `kill -0 $PID` to test whether a kill was successful instead of wait

use a second attempt with `kill -9` if the first kill did not succed.

keep the commandline of started processes around and compared them before kill to reduce the "oops I killed a wrong process" window


Try to restructure things:

0) think hard about what should and what should not run concurrently
    0.A) try restraint with trap


1) use one process pair per reflector (no multiplexed pingers) implement only gnu ping, busybox ping and tsping (and ntp)
    1.a) make pingers only runn for X iterations then restart them with a given time offset

2) try to structure the main loop as state machine with sane transitions and helper functions for state

3) trigger the mainloop both by ping and load messages from a single FIFO?
    3.a) can the result of a read in a variable be parsed again?
	use a parser that detects the "message" type (DELAY, TRAFFIC, CPULOAD, COMMAND, ...)
	
4) also track per CPU load (probably simply as 100-%idle)

5) required states:
    POLLING, SLEEP, STALL, ...
    
6) move all individual processes to their own files, so that top/htop/ps give meaningful indication what a process does

7) implement command FIFOs back from the main loop to the background processes? Or